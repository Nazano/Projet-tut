#------------------------------------------------------------
#        Script MySQL.
#------------------------------------------------------------

#------------------------------------------------------------
# Table: Produit
#------------------------------------------------------------

CREATE TABLE Produit(
        idProduit Int NOT NULL AUTO_INCREMENT,
        prix      Float ,
        stock     Float ,
	libelle   Varchar(30),
        PRIMARY KEY (idProduit )
)ENGINE=InnoDB;

#------------------------------------------------------------
# Table: Compte
#------------------------------------------------------------

CREATE TABLE Compte(
        idCompte Int NOT NULL AUTO_INCREMENT,
        solde    Float ,
        PRIMARY KEY (idCompte )
)ENGINE=InnoDB;

#------------------------------------------------------------
# Table: CatégorieEnfant
#------------------------------------------------------------

CREATE TABLE CategorieEnfant(
        idCategorie Int NOT NULL AUTO_INCREMENT,
        libelleCat  Varchar(15),
        PRIMARY KEY (idCategorie )
)ENGINE=InnoDB;


#------------------------------------------------------------
# Table: Statut
#------------------------------------------------------------

CREATE TABLE Statut(
        idStatut      Int NOT NULL AUTO_INCREMENT,
        libelleStatut Varchar(20),
        PRIMARY KEY (idStatut )
)ENGINE=InnoDB;

#------------------------------------------------------------
# Table: Parent
#------------------------------------------------------------

CREATE TABLE Parent(
        idParent  Int NOT NULL AUTO_INCREMENT,
        nom        Varchar(20),
        prenom     Varchar(20),
        mail       Varchar(30),
        telephone  Varchar(20),
	id	   Varchar(20),
	psswd      Varchar(20),
        idStatut   Int ,
        PRIMARY KEY (idParent ),
	CONSTRAINT FK_Parent_idStatut FOREIGN KEY (idStatut) REFERENCES Statut(idStatut) ON DELETE CASCADE
)ENGINE=InnoDB;


#------------------------------------------------------------
# Table: Enfant
#------------------------------------------------------------

CREATE TABLE Enfant(
        idEnfant      Int NOT NULL AUTO_INCREMENT,
        nom           Varchar(20),
        prenom        Varchar(20) ,
        dateNaissance Date ,
        idCategorie   Int ,
        idCompte      Int ,
        PRIMARY KEY (idEnfant ),
	CONSTRAINT FK_Enfant_idCategorie FOREIGN KEY (idCategorie) REFERENCES CategorieEnfant(idCategorie) ON DELETE CASCADE,
	CONSTRAINT FK_Enfant_idCompte FOREIGN KEY (idCompte) REFERENCES Compte(idCompte) ON DELETE CASCADE
)ENGINE=InnoDB;


#------------------------------------------------------------
# Table: Consommation
#------------------------------------------------------------

CREATE TABLE Consommation(
        idConso   Int NOT NULL AUTO_INCREMENT,
        qteConso  Float ,
        dateConso Date ,
        idEnfant  Int ,
        idProduit Int ,
        PRIMARY KEY (idConso ),
	CONSTRAINT FK_Consommation_idEnfant FOREIGN KEY (idEnfant) REFERENCES Enfant(idEnfant) ON DELETE CASCADE,
	CONSTRAINT FK_Consommation_idProduit FOREIGN KEY (idProduit) REFERENCES Produit(idProduit) ON DELETE CASCADE
)ENGINE=InnoDB;


#------------------------------------------------------------
# Table: Achat
#------------------------------------------------------------

CREATE TABLE Achat(
        idAchat   Int NOT NULL AUTO_INCREMENT,
        qteAchete Int ,
        dateAchat Date ,
        prix      Float ,
        idParent  Int ,
        idProduit Int ,
        PRIMARY KEY (idAchat ),
	CONSTRAINT FK_Achat_idParent FOREIGN KEY (idParent) REFERENCES Parent(idParent) ON DELETE CASCADE,
	CONSTRAINT FK_Achat_idProduit FOREIGN KEY (idProduit) REFERENCES Produit(idProduit) ON DELETE CASCADE
)ENGINE=InnoDB;

#------------------------------------------------------------
# Table: est l'enfant de
#------------------------------------------------------------

CREATE TABLE est_l_enfant_de(
        idParent Int NOT NULL ,
        idEnfant Int NOT NULL ,
        PRIMARY KEY (idParent ,idEnfant ),
	CONSTRAINT FK_est_l_enfant_de_idParent FOREIGN KEY (idParent) REFERENCES Parent(idParent) ON DELETE CASCADE,
	CONSTRAINT FK_est_l_enfant_de_idEnfant FOREIGN KEY (idEnfant) REFERENCES Enfant(idEnfant) ON DELETE CASCADE
)ENGINE=InnoDB;


#------------------------------------------------------------
# Table: est compose de
#------------------------------------------------------------

CREATE TABLE est_compose_de(
        idProduit   Int NOT NULL ,
        idProduit_1 Int NOT NULL ,
	qte Int NOT NULL,
        PRIMARY KEY (idProduit ,idProduit_1),
	CONSTRAINT FK_est_compose_de_idProduit FOREIGN KEY (idProduit) REFERENCES Produit(idProduit) ON DELETE CASCADE,
	CONSTRAINT FK_est_compose_de_idProduit_1 FOREIGN KEY (idProduit_1) REFERENCES Produit(idProduit) ON DELETE CASCADE
)ENGINE=InnoDB;

#------------------------------------------------------------
# Table: rupture de stock
#------------------------------------------------------------

CREATE TABLE rupture_de_stock(
        idProduit   Int NOT NULL ,
	qte Int NOT NULL,
        PRIMARY KEY (idProduit),
	CONSTRAINT FK_rupture_de_solde_idProduit FOREIGN KEY (idProduit) REFERENCES Produit(idProduit) ON DELETE CASCADE
)ENGINE=InnoDB;


#------------------------------------------------------------
# Table: rupture de solde
#------------------------------------------------------------

CREATE TABLE rupture_de_solde(
        idCompte Int NOT NULL ,
	solde Float NOT NULL,
        PRIMARY KEY (idCompte),
	CONSTRAINT FK_rupture_de_solde_idCompte FOREIGN KEY (idCompte) REFERENCES Compte(idCompte) ON DELETE CASCADE
)ENGINE=InnoDB;

#------------------------------------------------------------
# Trigger: proche_ruptureDeStock
#------------------------------------------------------------
# Créé un TRIGGER qui insère dans la table rupture_de_stock le produit proche de la rupture de stock.

Delimiter | CREATE TRIGGER proche_ruptureDeStock1 AFTER UPDATE
ON Produit 
FOR EACH ROW
BEGIN
	IF NEW.stock < 5 Then 
		INSERT INTO rupture_de_stock VALUES (NEW.idProduit,NEW.Stock);
	END IF;
END|	


Delimiter | CREATE TRIGGER proche_ruptureDeStock2 AFTER INSERT
ON Produit 
FOR EACH ROW
BEGIN
	IF NEW.stock < 5 Then 
		INSERT INTO rupture_de_stock VALUES (NEW.idProduit,NEW.Stock);
	END IF;
END|	


#------------------------------------------------------------
# Trigger: solde_presqueVide
#------------------------------------------------------------
# Créé un TRIGGER qui insère dans la table rupture_de_solde le compte d'un enfant dont le solde est presque nul.

Delimiter | CREATE TRIGGER solde_presqueVide1 AFTER UPDATE
ON Compte
FOR EACH ROW
BEGIN 
	IF NEW.solde < 5.00 Then
		INSERT INTO rupture_de_solde VALUES (NEW.idCompte,NEW.solde);
	END IF;
END|

Delimiter | CREATE TRIGGER solde_presqueVide2 AFTER INSERT
ON Compte
FOR EACH ROW
BEGIN 
	IF NEW.solde < 5.00 Then
		INSERT INTO rupture_de_solde VALUES (NEW.idCompte,NEW.solde);
	END IF;
END|

#------------------------------------------------------------
# Fonctions
#------------------------------------------------------------

DELIMITER | CREATE OR REPLACE PROCEDURE ajouter_Produit(prixP FLOAT, stockP FLOAT, libelleP VARCHAR(30))
BEGIN
	INSERT INTO Produit (prix,stock,libelle) VALUES (prixP,stockP,libelleP);
END|

DELIMITER | CREATE OR REPLACE PROCEDURE modifier_Produit(idP INT, prixP FLOAT, stockP FLOAT, libelleP VARCHAR(30))
BEGIN
    UPDATE Produit
    SET prix = prixP, stock = StockP, libelle = libelleP
    WHERE idProduit = idP ;
END|
 
DELIMITER | CREATE OR REPLACE  PROCEDURE supprimer_Produit(idP INT)
BEGIN
    DELETE FROM Produit
    WHERE idProduit = idP ;
END |

 
DELIMITER | CREATE OR REPLACE PROCEDURE creer_compte(nomE VARCHAR(20), prenomE VARCHAR(20), dateNaissanceE DATE)
BEGIN
    DECLARE idCat, idCompteE INT;
    INSERT INTO Compte(solde) VALUES(0) ;
    SET idCat = calculer_Categorie(dateNaissanceE) ;
    INSERT INTO Enfant( nom, prenom, dateNaissance, idCategorie, idCompte) VALUES( nomE, prenomE, dateNaissanceE, idCat, LAST_INSERT_ID());
END|
 
 
DELIMITER | CREATE OR REPLACE PROCEDURE creer_Compte_Enfant(nomE VARCHAR(20), prenomE VARCHAR(20), dateNaissanceE DATE, idCompteE INT)
BEGIN
    DECLARE idCat INT;
    SET idCat = calculer_Categorie(dateNaissanceE);
    INSERT INTO Enfant VALUES(NULL, nomE, prenomE, dateNaissanceE, idCat, idCompteE);
END |
 
 
DELIMITER | CREATE OR REPLACE PROCEDURE supprimer_Compte_Enfant(idE INT)
BEGIN
    DECLARE nbEnfants INT;
    DECLARE idCompteE INT;
    SELECT idCompte into idCompteE
    from Enfant
    where idEnfant=idE;
    
    SET nbEnfants = count_IDCompte(idCompteE);
    IF(nbEnfants > 1) THEN
        DELETE FROM Enfant
        WHERE idEnfant = idE ;
    ELSE
        DELETE FROM Enfant
        WHERE idEnfant = idE ;
    END IF ;
END|
 
DELIMITER | CREATE OR REPLACE FUNCTION count_IDCompte(idCompteE INT) RETURNS INT
BEGIN
    DECLARE nbID INT;
    SELECT COUNT(*) INTO nbID
    FROM Compte
    WHERE idCompte = idCompteE ;
    RETURN nbID ;
END|
 
 
DELIMITER | CREATE OR REPLACE PROCEDURE creer_Compte_Parent(nomP VARCHAR(20), prenomP VARCHAR(20), mailP VARCHAR(50), telephoneP VARCHAR(10), idStatutP INT, idP INT, psswdP VARCHAR(20))
BEGIN
    INSERT INTO Parent( nom, prenom, mail, telephone, idStatut, id, psswd ) VALUES( nomP, prenomP, mailP, telephoneP, idStatutP, idP, psswdP);
END|

DELIMITER | CREATE OR REPLACE FUNCTION calculer_Categorie(dateNaissance DATE) RETURNS INT
BEGIN
        DECLARE idC INT ;
        DECLARE CURDATE DATE;
        SET CURDATE = CURRENT_DATE();
        IF(YEAR(CURDATE) - YEAR(dateNaissance) <= 8) THEN
            SET idc = 1 ;
        ELSEIF(YEAR(CURDATE) - YEAR(dateNaissance) <= 10) THEN
             SET idc = 2 ;
        ELSEIF(YEAR(CURDATE) - YEAR(dateNaissance) <= 12) THEN
            SET idc = 3 ;
        ELSEIF(YEAR(CURDATE) - YEAR(dateNaissance) <= 14) THEN
            SET idc = 4 ;
        ELSEIF(YEAR(CURDATE) - YEAR(dateNaissance) <= 16) THEN
            SET idc = 5 ;
        ELSEIF(YEAR(CURDATE) - YEAR(dateNaissance) <= 18) THEN
            SET idc = 6 ;
        ELSEIF(YEAR(CURDATE) - YEAR(dateNaissance) <= 20) THEN
            SET idc = 7 ;
        END IF;
    RETURN idc;
END |
 
DELIMITER | CREATE OR REPLACE PROCEDURE supprimer_Compte_Parent(idP INT)
BEGIN
    DECLARE nbParents INT;
    SET nbParents = calculer_NbParents(idP);
    IF(nbParents = 1) THEN
        DELETE FROM Parent
        WHERE idParent = idP ;
    ELSE
        DELETE FROM Parent
        WHERE idParent = idP;
    END IF;
END|
 
DELIMITER | CREATE OR REPLACE FUNCTION calculer_NbParents(idP INT) RETURNS INT
BEGIN
    DECLARE nbParents, idCompteEnfant INT;
   
    SELECT idEnfant INTO idCompteEnfant
    FROM est_l_enfant_de
    WHERE idParent = idP ;
   
    SELECT COUNT(*) INTO nbParents
    FROM est_l_enfant_de
    WHERE idEnfant = idCompteEnfant ;
    RETURN nParents ;
END|
 
DELIMITER | CREATE OR REPLACE PROCEDURE creer_Course(libelleP VARCHAR(30), quantite INT, dateA DATE, prixA FLOAT, idPa INT)
BEGIN
    DECLARE produitExistant INT;
    DECLARE idProd INT;
    DECLARE prixU Float;
    DECLARE qteNew float;
    DECLARE qteOld float;
        /* Check si le produit est dÈj dans la BD */
    SELECT COUNT(*) INTO produitExistant
    FROM Produit
    WHERE libelle = libelleP;
   
    IF (produitExistant = 1) THEN
        /*Recuperer l'ID du produit */
        SELECT idProduit INTO idProd
        FROM Produit
        WHERE libelle = libelleP;
        /* INSERT dans la table Achat */
        INSERT INTO Achat(qteAchete, dateAchat,prix,idParent,idProduit) VALUES(quantite,dateA,prixA,idPa,idProd);
        /* hausse du stock*/
        /*SELECT stock into qteOld
        from produit
        where idProduit = idProd;

        SELECT prix into prixU
        from produit
        where idProduit = idProd;

        SET qteNew = qteOld+quantite;
        modifier_Produit(idp,prixU,qteNew,libelleP);*/

    ELSE
        SET prixU = prixA/quantite;
        INSERT INTO Produit(Prix, Stock, libelle) VALUES(prixU, quantite, libelleP);
        SET idProd = LAST_INSERT_ID();
        INSERT INTO Achat(qteAchete, dateAchat, prix, idParent, idProduit) VALUES( quantite, dateA, prixA, idPa, idProd);
    END IF;
END |

DELIMITER | CREATE OR REPLACE PROCEDURE ajouter_solde(idCompte2 INT, soldeToAdd FLOAT)
BEGIN 
    DECLARE oldSolde FLOAT;
    SELECT solde into oldSolde
    from Compte
    where idCompte = idCompte2;
    Set oldSolde = oldSolde + soldeToAdd;

    UPDATE compte set solde = oldSolde where idCompte = idCompte2;

END|

DELIMITER | CREATE OR REPLACE PROCEDURE ajouter_consommation(
    IN nomProduit VARCHAR(10),
    IN idEnfant2 Int,
    IN qte Float)

BEGIN
    DECLARE idProduitTo INT;
    DECLARE qteProduit Float;
    DECLARE diff Float;
    DECLARE diffSolde Float;
    DECLARE prixAPayer Float;
    DECLARE idCompteEnfant INT;
    DECLARE soldeRestant Float;

    /*on stock l'id du produit correspondant au texte donné*/
    SELECT idProduit INTO idProduitTo
    FROM produit p
    WHERE p.libelle = nomProduit ;

    /* on stock la qte de produit disponible*/
    SELECT stock INTO qteProduit
    FROM produit p
    WHERE p.idProduit = idProduitTo ;

    /* On trouve l'id du compte associé à l'enfant*/
        SELECT idCompte into idCompteEnfant
        FROM enfant
        WHERE idEnfant = idEnfant2;

    /* On trouve le solde restant de l'enfant*/
        SELECT solde into soldeRestant
        FROM compte
        WHERE idCompte = idCompteEnfant;

    /* On trouve le prix pour une quantité de 1*/
    SELECT prix into prixAPayer
        FROM produit
        WHERE idProduit = idProduitTo;

    SET
        prixAPayer = qte*prixAPayer ;
    SET
        diff = qteProduit - qte ;
    SET
        diffSolde = soldeRestant - prixAPayer ;
    
    IF diff >= 0 && diffSolde >= 0 THEN
        /* ajout de la ligne dans la table consommation */
        INSERT INTO consommation(dateConso,idEnfant,idProduit,qteConso )
        VALUES(CURRENT_DATE(),idEnfant2,idProduitTo,qte );

        /*décompte du solde du compte de l'enfant*/
        UPDATE Compte Set Solde = soldeRestant - prixAPayer where idCompte=idCompteEnfant;

        /*décompte de la quantite du produit*/
        UPDATE Produit Set stock = qteProduit-qte where idProduit=idProduitTo;
    ELSEIF diff <0 THEN 
        SELECT 'Il n y a pas assez de ce produit pour en consommer autant' ;
    ELSEIF diffSolde <0 THEN
        SELECT  'Pas assez d argent sur le compte';
    ELSE 
        SELECT 'Erreur lors de l execution de la procedure';
    END IF ;
END|

DELIMITER | CREATE OR REPLACE PROCEDURE suppression_conso(IN idConso2 INT)

BEGIN
    DECLARE idEnfant2 INT;
    DECLARE idProduit2 INT;
    DECLARE prixARembourser Float;
    DECLARE idCompteEnfant INT;
    DECLARE soldeRestant Float;
    DECLARE qteConso2 INT;
    

    /*on stock l'id du produit consommé*/
    SELECT idProduit into idProduit2
    FROM consommation
    WHERE idConso = idConso2;

    /*On stock la qte consommée*/
    SELECT qteConso into qteConso2
    FROM consommation
    WHERE idConso = idConso2;

    /*On stock l'id de l'enfant concerné*/
    SELECT idEnfant into idEnfant2
    FROM consommation
    WHERE idConso = idConso2;

    /* On trouve l'id du compte associé à l'enfant*/
    SELECT idCompte into idCompteEnfant
    FROM enfant
    WHERE idEnfant = idEnfant2;

    /* On trouve le solde restant de l'enfant*/
    SELECT solde into soldeRestant
    FROM compte
    WHERE idCompte = idCompteEnfant;

    /* On trouve le prix pour une quantité de 1*/
    SELECT prix into prixARembourser
    FROM produit
    WHERE idProduit = idProduit2;

    

    SET
        prixARembourser = qteConso2 * prixARembourser;
    

    /* suppression de la ligne dans la table consommation */
    DELETE FROM consommation where idConso = idConso2;

    /*acompte du solde du compte de l'enfant*/
    UPDATE Compte Set Solde = soldeRestant + prixARembourser where idCompte=idCompteEnfant;

    /*décompte de la quantite du produit*/
    UPDATE Produit Set stock = qteConso2+qteConso2 where idProduit=idProduit2;
END|


DELIMITER | CREATE OR REPLACE PROCEDURE creer_Course(libelleP VARCHAR(30), quantite INT, dateP DATE, prixA FLOAT) 
BEGIN
	DECLARE produitExistant INT;
	DECLARE idProd INT;
	DECLARE prixU INT;
	/* Check si le produit est déjà dans la BD */
	SELECT COUNT(*) INTO produitExistant
	FROM Produit
	WHERE libelle = libelleP;

	/* S'il l'est déjà */
	IF (produitExistant = 1) THEN
		/*Recupérer l'ID du produit */
		SELECT idProduit INTO idProd
        FROM Produit
		WHERE libelle = libelleP;
		/* INSERT dans la table Achat */
		INSERT INTO Achat (qteAchete,dateAchat,prix,idParent,idProduit) VALUES (quantite,dateP,prixA,idP,idProd);
        /*Sinon ... */
	ELSE
		SET prixU = prixA/quantite;
		INSERT INTO Produit (Prix,Stock,libellé) VALUES (prixU,quantite,libelleP);
		SET idProd = LAST_INSERT_ID();
		INSERT INTO Achat (qteAchete,dateAchat,prix,idParent,idProduit) VALUES (quantite,dateP,prixA,idP,idProd);
	END IF;
END|


DELIMITER | CREATE OR REPLACE PROCEDURE reset_BD()
BEGIN
    /* REMETTRE LE SOLDE DES ENFANTS A 0 */
    UPDATE compte
    SET solde = 0;
    
    /* REMETTRE A 0 LES CONSOMMATIONS ET LES ACHATS */
    DELETE FROM achat;
    DELETE FROM consommation;
    
    /* REMETTRE LES ENFANTS DANS LA BONNE CATEGORIE */
    UPDATE enfant
    SET idCategorie = calculer_Categorie(dateNaissance);
END|

/* Affichage des parents */
DELIMITER | CREATE OR REPLACE PROCEDURE display_Parents()
BEGIN
	SELECT nom, prenom, mail, telephone, libelleStatut
	FROM Parent NATURAL JOIN Statut;
END |

/* Affichage des enfants */
DELIMITER | CREATE OR REPLACE PROCEDURE display_Enfants()
BEGIN
	SELECT nom, prenom, dateNaissance, Categorie
	FROM Enfant NATURAL JOIN (Compte, CatégorieEnfant);
END |

/* Affichage du solde des enfants */
DELIMITER | CREATE OR REPLACE PROCEDURE display_SoldeEnfants()
BEGIN
	SELECT * 
	FROM V_Enfant;
END |

/* Affichage stock */
DELIMITER | CREATE OR REPLACE PROCEDURE display_SoldeEnfants()
BEGIN
	SELECT * 
	FROM V_Produit;
END |

/*Affichage Course du jour */
DELIMITER | CREATE OR REPLACE PROCEDURE display_Courses(date DATE)
BEGIN 
	SELECT libelle, qteAchete, prix
	FROM ACHAT NATURAL JOIN Produit
	WHERE dateAchat = date;
END |

/* Obtenir montant achat */
DELIMITER | CREATE OR REPLACE FUNCTION montantAchat(date DATE)
RETURNS INT
BEGIN
	DECLARE montantAchat INT;	
	SELECT SUM(prix) INTO montantAchat
	FROM Achat
	WHERE dateAchat = date;
	RETURN montantAchat;
END |

#------------------------------------------------------------
# Insertions
#------------------------------------------------------------
DELIMITER ;
######################### INSERTIONS DANS LA TABLE STATUT #########################

INSERT INTO Statut(libelleStatut) VALUES('Président');

INSERT INTO Statut(libelleStatut) VALUES('ParentAccompagnateur');

INSERT INTO Statut(libelleStatut) VALUES('Parent');

######################## INSERTIONS DANS LA TABLE CATEGORIEENFANT #########################

INSERT INTO CategorieEnfant(libelleCat) VALUES('-8 ans');

INSERT INTO CategorieEnfant(libelleCat) VALUES('-10 ans');

INSERT INTO CategorieEnfant(libelleCat) VALUES('-12 ans');

INSERT INTO CategorieEnfant(libelleCat) VALUES('-14 ans');

INSERT INTO CategorieEnfant(libelleCat) VALUES('-16 ans');

INSERT INTO CategorieEnfant(libelleCat) VALUES('-18 ans');

INSERT INTO CategorieEnfant(libelleCat) VALUES('-20 ans');

######################### INSERTIONS DANS LA TABLE COMPTE #########################

INSERT INTO Compte(solde) VALUES (4.30);
INSERT INTO Compte(solde) VALUES (14.60);
INSERT INTO Compte(solde) VALUES (22.50);
INSERT INTO Compte(solde) VALUES (3.70);
INSERT INTO Compte(solde) VALUES (28.90);
INSERT INTO Compte(solde) VALUES (20.90);
INSERT INTO Compte(solde) VALUES (30.70);
INSERT INTO Compte(solde) VALUES (8.50);
INSERT INTO Compte(solde) VALUES (21.40);
INSERT INTO Compte(solde) VALUES (19.40);
INSERT INTO Compte(solde) VALUES (20.60);
INSERT INTO Compte(solde) VALUES (2.10);
INSERT INTO Compte(solde) VALUES (28.0);
INSERT INTO Compte(solde) VALUES (1.20);
INSERT INTO Compte(solde) VALUES (0.80);

######################### INSERTIONS DANS LA TABLE PARENT #########################

INSERT INTO Parent (nom,prenom,mail,telephone,id,psswd,idStatut) VALUES ("Thibault","Cothenet","thibault.cothenet@orange.fr","06 21 60 78 65","tcothen","toto",1);
INSERT INTO Parent (nom,prenom,mail,telephone,id,psswd,idStatut) VALUES ("Antoine","Julien","antoine.julien@gmail.com","06 39 91 14 64","ajulien","tutu",2);
INSERT INTO Parent (nom,prenom,mail,telephone,id,psswd,idStatut) VALUES ("Preston","Shepherd","preston.sheperd@gmail.com","07 59 60 70 27","pshephe","azerty",2);
INSERT INTO Parent (nom,prenom,mail,telephone,id,psswd,idStatut) VALUES ("Ifeoma","Ryan","ifeoma.ryan@gmail.com","07 49 99 87 36","iryan","qwerty",2);
INSERT INTO Parent (nom,prenom,mail,telephone,id,psswd,idStatut) VALUES ("Kelsey","Justice","kelsey.justice@gmail.com","06 97 05 12 30","kjustic","chat123",2);
INSERT INTO Parent (nom,prenom,mail,telephone,id,psswd,idStatut) VALUES ("Deirdre","Tran","deirdre.tran@gmail.com","06 39 67 68 71","dtran","quebec5",3);
INSERT INTO Parent (nom,prenom,mail,telephone,id,psswd,idStatut) VALUES ("Emerson","Bass","emerson.bass@gmail.com","06 63 31 26 41","ebass","montreal9",3);
INSERT INTO Parent (nom,prenom,mail,telephone,id,psswd,idStatut) VALUES ("Hayden","Harris","hayden.harris@gmail.com","06 76 33 72 31","hharris","chien55",3);
INSERT INTO Parent (nom,prenom,mail,telephone,id,psswd,idStatut) VALUES ("Tad","Oconnor","tad.oconnor@gmail.com","07 51 48 25 22","toconno","coucou123",3);
INSERT INTO Parent (nom,prenom,mail,telephone,id,psswd,idStatut) VALUES ("Fulton","Shaq","fulton.shaq@gmail.com","07 69 77 69 33","fshaq","pomme23",3);
INSERT INTO Parent (nom,prenom,mail,telephone,id,psswd,idStatut) VALUES ("Amelia","Dawson","amelia.dawson@gmail.com","06 03 04 90 68","adawson","poutine666",3);
INSERT INTO Parent (nom,prenom,mail,telephone,id,psswd,idStatut) VALUES ("Ariel","Chandler","ariel.chandler@gmail.com","06 27 65 14 80","achandl","tom32",3);
INSERT INTO Parent (nom,prenom,mail,telephone,id,psswd,idStatut) VALUES ("Johanna","Lindsey","johanna.lindsey@gmail.com","01 27 65 14 80","jlindse","ouragan67",3);
INSERT INTO Parent (nom,prenom,mail,telephone,id,psswd,idStatut) VALUES ("Henry","Flowers","henry.flowers@gmail.com","01 27 65 14 80","hflower","neige12",3);
INSERT INTO Parent (nom,prenom,mail,telephone,id,psswd,idStatut) VALUES ("John","Lennon","john.lennon@gmail.com","01 27 65 14 80","jlennon","froid99",3);

######################### INSERTIONS DANS LA TABLE ENFANT #########################

call creer_Compte_Enfant("Phebee","Cothenet","2002/06/05",1);
call creer_Compte_Enfant("Jermaine","Julien","2004/04/22",2);
call creer_Compte_Enfant("Cooper","Shepherd","2000/03/28",3);
call creer_Compte_Enfant("Ivor","Shepherd","2004/06/28",3); 
call creer_Compte_Enfant("Urielle","Ryan","2001/10/07",4);
call creer_Compte_Enfant("Lacota","Justice","2007/10/18",5);
call creer_Compte_Enfant("Keith","Justice","2012/01/16",5);
call creer_Compte_Enfant("Rae","Tran","2007/10/18",6);
call creer_Compte_Enfant("Dorian","Bass","2006/06/10",7);
call creer_Compte_Enfant("Colby","Harris","2001/04/13",8);
call creer_Compte_Enfant("Madeson","Oconnor","2004/04/08",9);
call creer_Compte_Enfant("Big","Shaq","2009/04/13",10);
call creer_Compte_Enfant("Isaac","Shaq","2002/09/30",10);
call creer_Compte_Enfant("Justina","Dawson","2004/06/28",11);
call creer_Compte_Enfant("Mari","Chandler","2011/08/28",11);
call creer_Compte_Enfant("Mara","Lindsey","2009/05/03",12);
call creer_Compte_Enfant("Jackson","Lindsey","2005/07/13",12);
call creer_Compte_Enfant("Malcolm","Flowers","2001/04/17",13);
call creer_Compte_Enfant("Taylor","Rutledge","2000/02/29",14);
call creer_Compte_Enfant("Blaine","Lennon","2008/01/09",15);

######################### INSERTIONS DANS LA TABLE EST_L_ENFANT_DE #########################

INSERT INTO est_l_enfant_de(idParent,idEnfant) VALUES (1,1);
INSERT INTO est_l_enfant_de(idParent,idEnfant) VALUES (2,2);
INSERT INTO est_l_enfant_de(idParent,idEnfant) VALUES (3,3);
INSERT INTO est_l_enfant_de(idParent,idEnfant) VALUES (3,4);
INSERT INTO est_l_enfant_de(idParent,idEnfant) VALUES (4,5);
INSERT INTO est_l_enfant_de(idParent,idEnfant) VALUES (5,6);
INSERT INTO est_l_enfant_de(idParent,idEnfant) VALUES (5,7);
INSERT INTO est_l_enfant_de(idParent,idEnfant) VALUES (6,8);
INSERT INTO est_l_enfant_de(idParent,idEnfant) VALUES (7,9);
INSERT INTO est_l_enfant_de(idParent,idEnfant) VALUES (8,10);
INSERT INTO est_l_enfant_de(idParent,idEnfant) VALUES (9,11);
INSERT INTO est_l_enfant_de(idParent,idEnfant) VALUES (10,12);
INSERT INTO est_l_enfant_de(idParent,idEnfant) VALUES (10,13);
INSERT INTO est_l_enfant_de(idParent,idEnfant) VALUES (11,14);
INSERT INTO est_l_enfant_de(idParent,idEnfant) VALUES (11,15);
INSERT INTO est_l_enfant_de(idParent,idEnfant) VALUES (12,16);
INSERT INTO est_l_enfant_de(idParent,idEnfant) VALUES (12,17);
INSERT INTO est_l_enfant_de(idParent,idEnfant) VALUES (13,18);
INSERT INTO est_l_enfant_de(idParent,idEnfant) VALUES (14,19);
INSERT INTO est_l_enfant_de(idParent,idEnfant) VALUES (15,20);

######################### INSERTIONS DANS LA TABLE PRODUIT #########################

INSERT INTO Produit(prix,stock,libelle) VALUES(0.70, 100, 'croissant');

INSERT INTO Produit(prix,stock,libelle) VALUES(2.80, 150, 'nutella');

INSERT INTO Produit(prix,stock,libelle) VALUES(3.10, 30,  'brioche');

INSERT INTO Produit(prix,stock,libelle) VALUES(0.80, 180, 'eau: cristalline');  

INSERT INTO Produit(prix,stock,libelle) VALUES(0.30, 15, 'tartine de nutella');  

INSERT INTO Produit(prix,stock,libelle) VALUES(0.50, 0, 'orange');

######################### INSERTIONS DANS LA TABLE EST_COMPOSE_DE #########################

INSERT INTO est_compose_de(idProduit,idProduit_1,qte) VALUES (5, 2, 1);

INSERT INTO est_compose_de(idProduit,idProduit_1,qte) VALUES (5, 3, 2);

######################### INSERTIONS DANS LA TABLE CONSOMMATION #########################

INSERT INTO Consommation(qteConso,dateConso,idEnfant,idProduit) VALUES (2,'2017/09/09',1,1);
INSERT INTO Consommation(qteConso,dateConso,idEnfant,idProduit) VALUES (1,'2017/09/09',1,5);
INSERT INTO Consommation(qteConso,dateConso,idEnfant,idProduit) VALUES (2,'2017/09/16',1,3);
INSERT INTO Consommation(qteConso,dateConso,idEnfant,idProduit) VALUES (3,'2017/09/09',2,4);
INSERT INTO Consommation(qteConso,dateConso,idEnfant,idProduit) VALUES (2,'2017/09/09',3,3);
INSERT INTO Consommation(qteConso,dateConso,idEnfant,idProduit) VALUES (6,'2017/09/16',3,5);
INSERT INTO Consommation(qteConso,dateConso,idEnfant,idProduit) VALUES (4,'2017/09/23',4,4);
INSERT INTO Consommation(qteConso,dateConso,idEnfant,idProduit) VALUES (3,'2017/09/16',5,3);
INSERT INTO Consommation(qteConso,dateConso,idEnfant,idProduit) VALUES (3,'2017/09/09',6,5);
INSERT INTO Consommation(qteConso,dateConso,idEnfant,idProduit) VALUES (7,'2017/09/23',6,1);
INSERT INTO Consommation(qteConso,dateConso,idEnfant,idProduit) VALUES (2,'2017/09/25',8,1);
INSERT INTO Consommation(qteConso,dateConso,idEnfant,idProduit) VALUES (7,'2017/09/25',9,3);
INSERT INTO Consommation(qteConso,dateConso,idEnfant,idProduit) VALUES (5,'2017/09/09',10,4);
INSERT INTO Consommation(qteConso,dateConso,idEnfant,idProduit) VALUES (2,'2017/09/16',10,1);
INSERT INTO Consommation(qteConso,dateConso,idEnfant,idProduit) VALUES (4,'2017/09/09',12,5);
INSERT INTO Consommation(qteConso,dateConso,idEnfant,idProduit) VALUES (8,'2017/09/25',12,3);
INSERT INTO Consommation(qteConso,dateConso,idEnfant,idProduit) VALUES (4,'2017/09/09',12,4);
INSERT INTO Consommation(qteConso,dateConso,idEnfant,idProduit) VALUES (5,'2017/09/28',13,1);
INSERT INTO Consommation(qteConso,dateConso,idEnfant,idProduit) VALUES (8,'2017/10/02',14,3);
INSERT INTO Consommation(qteConso,dateConso,idEnfant,idProduit) VALUES (3,'2017/10/02',15,4);

######################### INSERTIONS DANS LA TABLE ACHAT #########################

INSERT INTO Achat(qteAchete,dateAchat,prix,idParent,idProduit) VALUES (3, '2017/09/09', 2.10, 5, 1); 

INSERT INTO Achat(qteAchete,dateAchat,prix,idParent,idProduit) VALUES (5, '2017/09/16', 28.00, 8, 2); 

####### VUE ENFANT #######

CREATE OR REPLACE VIEW V_Enfant
AS
SELECT prenom, nom, solde
FROM Enfant, Compte
WHERE Enfant.idCompte = Compte.idCompte;

####### VUE PRODUITS #######

CREATE OR REPLACE VIEW V_Produit
AS 
SELECT libelle, stock, prix
FROM Produit;